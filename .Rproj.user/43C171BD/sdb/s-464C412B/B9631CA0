{
    "collab_server" : "",
    "contents" : "# Class definitions for mutation classes\n\n#' @include Shazam.R\nNULL\n\n#### Classes ####\n\n#' S4 class defining replacement and silent mutation definitions\n#' \n#' \\code{MutationDefinition} defines a common data structure for defining the whether\n#' a mutation is annotated as a replacement or silent mutation.\n#' \n#' @slot    name            name of the MutationDefinition.\n#' @slot    description     description of the model and its source.\n#' @slot    classes         named character vectors with single-letter amino acid codes as names\n#'                          and amino acid classes as values, with \\code{NA} assigned to set of \n#'                          characters \\code{c(\"X\", \"*\", \"-\", \".\")}. Replacement (R) is be \n#'                          defined as a change in amino acid class and silent (S) as no \n#'                          change in class. \n#' @slot    codonTable      matrix of codons (columns) and substitutions (rows).\n#' @slot    citation        publication source.\n#' \n#' @seealso\n#' See \\link{MUTATION_SCHEMES} for a set of predefined \\code{MutationDefinition} objects.\n#'    \n#' @name         MutationDefinition-class\n#' @rdname       MutationDefinition-class\n#' @aliases      MutationDefinition\n#' @exportClass  MutationDefinition\nsetClass(\"MutationDefinition\", \n         slots=c(name=\"character\",\n                 description=\"character\",\n                 classes=\"character\",\n                 codonTable=\"matrix\",\n                 citation=\"character\"))\n\n\n#### Builder functions ####\n\n# Create all codons one mutation away from input codon.\n#\n# All codons one mutation away from the input codon are generated.\n#\n# @param codon   starting codon to which mutations are added\n# @return a vector of codons.\nallCodonMuts <- function(codon) {\n    codon_char <- seqinr::s2c(codon)\n    matCodons <- t(array(codon_char, dim=c(3,12)))\n    matCodons[1:4, 1] <- NUCLEOTIDES[1:4]\n    matCodons[5:8, 2] <- NUCLEOTIDES[1:4]\n    matCodons[9:12,3] <- NUCLEOTIDES[1:4]\n    return(apply(matCodons, 1, seqinr::c2s))\n}\n\n\n# Generate codon table\n#\n# First generates all informative codons and determines types of mutations.\n# Next generates uninformative codons (having either an N or a gap \"-\"\n# character) and sets the mutation type as NA.\n#\n# @param   aminoAcidClasses  vector of amino acid trait classes\n#                            if NULL then R or S is determined by amino acid identity\n# @return  matrix with all codons as row and column names and the type of mutation as \n#           the corresponding value in the matrix.\ncomputeCodonTable <- function(aminoAcidClasses=NULL) {\n    # Initialize empty data.frame\n    codon_table <- as.data.frame(matrix(NA, ncol=64, nrow=12))\n    \n    # Pre-compute every codon\n    counter <- 1\n    for(pOne in NUCLEOTIDES[1:4]) {\n        for(pTwo in NUCLEOTIDES[1:4]) {\n            for(pThree in NUCLEOTIDES[1:4]) {\n                codon <- paste0(pOne, pTwo, pThree)\n                colnames(codon_table)[counter] <- codon\n                counter <- counter + 1\n                all_muts <- allCodonMuts(codon)\n                codon_table[, codon] <- sapply(all_muts, function(x) { \n                    mutType = mutationType(x, codon, aminoAcidClasses=aminoAcidClasses) \n                    mutType = names(mutType)[which(mutType>0)]\n                    # does not support ambiguous characters\n                    # assumes that only 1 entry (R/S/Stop/na) from mutationType is non-zero/1\n                    stopifnot(length(mutType)==1)\n                    if (mutType==\"na\") {mutType=NA}\n                    return(mutType)\n                })\n            }\n        }\n    }\n    \n    # Set codons with N or . to be NA\n    chars <- c(\"N\",\"A\",\"C\",\"G\",\"T\", \".\")\n    for(n1 in chars) {\n        for(n2 in chars) {\n            for(n3 in chars) {\n                if(n1==\"N\" | n2==\"N\" | n3==\"N\" | n1==\".\" | n2==\".\" | n3==\".\") {\n                    codon_table[, paste0(n1, n2, n3)] <- rep(NA, 12)\n                }\n            }\n        }\n    }\n    \n    return(as.matrix(codon_table))\n}\n\n\n#' Creates a MutationDefinition\n#' \n#' \\code{createMutationDefinition} creates a \\code{MutationDefinition}.\n#'\n#' @param    name           name of the mutation definition.\n#' @param    classes        named character vectors with single-letter amino acid codes as names\n#'                          and amino acid classes as values, with \\code{NA} assigned to set of \n#'                          characters \\code{c(\"X\", \"*\", \"-\", \".\")}. Replacement (R) is be \n#'                          defined as a change in amino acid class and silent (S) as no \n#'                          change in class. \n#' @param    description    description of the mutation definition and its source data.\n#' @param    citation       publication source.\n#' \n#' @return   A \\code{MutationDefinition} object.\n#' \n#' @seealso  See \\link{MutationDefinition} for the return object.\n#' \n#' @examples\n#' # Define hydropathy classes\n#' library(alakazam)\n#' hydropathy <- list(hydrophobic=c(\"A\", \"I\", \"L\", \"M\", \"F\", \"W\", \"V\"),\n#'                    hydrophilic=c(\"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"K\"),\n#'                    neutral=c(\"G\", \"H\", \"P\", \"S\", \"T\", \"Y\"))\n#' chars <- unlist(hydropathy, use.names=FALSE)\n#' classes <- setNames(translateStrings(chars, hydropathy), chars)\n#'\n#' # Create hydropathy mutation definition\n#' md <- createMutationDefinition(\"Hydropathy\", classes)\n#' \n#' @export\ncreateMutationDefinition <- function(name,\n                                     classes,\n                                     description=\"\",\n                                     citation=\"\") {\n    # Build the codon table\n    codonTable <- computeCodonTable(aminoAcidClasses=classes)\n\n    # Define MutationDefinition object\n    md <- new(\"MutationDefinition\",\n              name=name,\n              description=description,\n              classes=classes,\n              codonTable=codonTable,\n              citation=citation)\n    \n    return(md)\n}\n\n\n#### Data ####\n\n#' Amino acid mutation definitions\n#'\n#' Definitions of replacement (R) and silent (S) mutations for different amino acid\n#' physicochemical classes.\n#'\n#' @format A \\link{MutationDefinition} object defining:\n#' \\itemize{\n#'   \\item  \\code{CHARGE_MUTATIONS}:      Amino acid mutations are defined by changes\n#'                                        in side chain charge class.\n#'   \\item  \\code{HYDROPATHY_MUTATIONS}:  Amino acid mutations are defined by changes\n#'                                        in side chain hydrophobicitity class.\n#'   \\item  \\code{POLARITY_MUTATIONS}:    Amino acid mutations are defined by changes\n#'                                        in side chain polarity class.\n#'   \\item  \\code{VOLUME_MUTATIONS}:      Amino acid mutations are defined by changes\n#'                                        in side chain volume class.\n#' }\n#' \n#' @references\n#' \\enumerate{\n#'   \\item  \\url{http://www.imgt.org/IMGTeducation/Aide-memoire/_UK/aminoacids/IMGTclasses.html} \n#' }\n#' \n#' @name   MUTATION_SCHEMES\nNULL\n\n#' @name    CHARGE_MUTATIONS\n#' @rdname  MUTATION_SCHEMES\nNULL\n\n#' @name    HYDROPATHY_MUTATIONS\n#' @rdname  MUTATION_SCHEMES\nNULL\n\n#' @name    POLARITY_MUTATIONS\n#' @rdname  MUTATION_SCHEMES\nNULL\n\n#' @name    VOLUME_MUTATIONS\n#' @rdname  MUTATION_SCHEMES\nNULL\n",
    "created" : 1497297093606.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4179432375",
    "id" : "B9631CA0",
    "lastKnownWriteTime" : 1497291774,
    "last_content_update" : 1497291774,
    "path" : "~/sync_smartgit/shazam/R/MutationDefinitions.R",
    "project_path" : "R/MutationDefinitions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}